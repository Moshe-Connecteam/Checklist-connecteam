import OpenAI from 'openai'
import { FormField } from './supabase'

// Initialize OpenAI client
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
})

export interface AIFormRequest {
  description: string
  type: 'text' | 'image'
  imageBase64?: string
}

export interface AIFormResponse {
  title: string
  description: string
  fields: FormField[]
}

// Text to Form Generation
export async function generateFormFromText(description: string): Promise<AIFormResponse> {
  console.log('ü§ñ Starting text-to-form generation...')
  console.log('üìù Description length:', description.length)
  
  try {
    const prompt = `Create a comprehensive, detailed form based on this description: "${description}"

Return only valid JSON in this exact format:
{
  "title": "Form Title",
  "description": "Form description", 
  "fields": [
    {
      "id": "field_1",
      "type": "text",
      "label": "Field Label",
      "required": false
    }
  ]
}

Available field types: text, email, textarea, select, radio, checkbox, number, date, rating, yesno, slider, file, image

For select/radio fields, add "options": ["Option 1", "Option 2", "Option 3"]
For rating fields, add "max": 5
For slider fields, add "slider_min": 0, "slider_max": 100
For file/image fields, add "accept": ".pdf,.doc,.jpg,.png"

IMPORTANT: Create a COMPREHENSIVE form with EXACTLY 10-15 fields (minimum 10, maximum 15). This is mandatory.

Think about:
- Contact information (name, email, phone)
- Core details specific to the topic
- Additional context fields
- Rating/feedback fields where appropriate
- Agreement/consent fields if needed
- File uploads if relevant

Make it detailed and professional with AT LEAST 10 FIELDS. Return only the JSON, no other text.`

    console.log('üîë Making OpenAI API call...')
    
    const completion = await openai.chat.completions.create({
      model: "gpt-3.5-turbo",
      messages: [
        {
          role: "system",
          content: "You are a form designer. Return only valid JSON, no explanations or markdown formatting."
        },
        {
          role: "user",
          content: prompt
        }
      ],
      temperature: 0.3,
      max_tokens: 1000
    })

    console.log('‚úÖ OpenAI API call successful')
    console.log('üìä Usage:', completion.usage)

    const responseText = completion.choices[0]?.message?.content
    if (!responseText) {
      console.log('‚ùå No response content from OpenAI')
      throw new Error('No response from OpenAI')
    }

    console.log('üìÑ Response length:', responseText.length)
    console.log('üîç Response preview:', responseText.substring(0, 200) + '...')

    // Clean the response - remove any markdown formatting
    let cleanedResponse = responseText.trim()
    if (cleanedResponse.startsWith('```json')) {
      cleanedResponse = cleanedResponse.replace(/```json\n?/, '').replace(/\n?```$/, '')
    }
    if (cleanedResponse.startsWith('```')) {
      cleanedResponse = cleanedResponse.replace(/```\n?/, '').replace(/\n?```$/, '')
    }

    // Parse the JSON response
    let aiResponse
    try {
      aiResponse = JSON.parse(cleanedResponse)
      console.log('‚úÖ JSON parsing successful')
    } catch (parseError) {
      console.error('‚ùå JSON parsing failed:', parseError)
      console.error('Raw response:', responseText)
      console.error('Cleaned response:', cleanedResponse)
      throw new Error(`Failed to parse AI response as JSON: ${parseError instanceof Error ? parseError.message : 'Unknown parsing error'}`)
    }
    
    // Validate and format the response
    const formResponse: AIFormResponse = {
      title: aiResponse.title || 'Generated Form',
      description: aiResponse.description || 'Form generated by AI',
      fields: aiResponse.fields?.map((field: any, index: number) => ({
        id: field.id || `field_${index + 1}`,
        type: field.type || 'text',
        label: field.label || `Field ${index + 1}`,
        placeholder: field.placeholder,
        required: field.required || false,
        options: field.options,
        min: field.min,
        max: field.max,
        rating_type: field.rating_type || 'stars',
        slider_min: field.slider_min,
        slider_max: field.slider_max,
        slider_step: field.slider_step || 1,
        accept: field.accept,
        multiple: field.multiple
      })) || []
    }

    console.log('‚úÖ Form generation complete:', {
      title: formResponse.title,
      fieldCount: formResponse.fields.length
    })

    return formResponse

  } catch (error) {
    console.error('üí• Error in generateFormFromText:', error)
    if (error instanceof Error) {
      console.error('Error name:', error.name)
      console.error('Error message:', error.message)
      console.error('Error stack:', error.stack)
    }
    throw new Error(`Failed to generate form from text description: ${error instanceof Error ? error.message : 'Unknown error'}`)
  }
}

// Image to Form Generation  
export async function generateFormFromImage(imageBase64: string, description?: string): Promise<AIFormResponse> {
  console.log('üñºÔ∏è Starting image-to-form generation...')
  console.log('üì∑ Image data length:', imageBase64.length)
  console.log('üìù Additional description:', description || 'None')
  
  // Log image format details
  const isDataUrl = imageBase64.startsWith('data:')
  console.log('üîç Image format check:')
  console.log('  - Is data URL:', isDataUrl)
  console.log('  - First 100 chars:', imageBase64.substring(0, 100))
  console.log('  - Last 50 chars:', imageBase64.substring(imageBase64.length - 50))
  
  try {
    // STEP 1: Extract text from the image using Vision API
    console.log('\nüîç STEP 1: Extracting text from image...')
    let extractedText = ''
    
    try {
      console.log('üîë Making OpenAI Vision API call for text extraction...')
      
      const extractionCompletion = await openai.chat.completions.create({
        model: "gpt-4o", // Use the more reliable gpt-4o instead of gpt-4-vision-preview
        messages: [
          {
            role: "system",
            content: "You are an OCR specialist. Extract ALL visible text from images with perfect accuracy. Include field labels, form titles, instructions, options, and any other text. Preserve the exact wording and structure."
          },
          {
            role: "user",
            content: [
              {
                type: "text",
                text: `Please extract ALL text visible in this image. Include:
- Form titles and headers
- Field labels and names
- Options and choices
- Instructions or descriptions
- Table headers and data
- Any checkboxes or task items
- Numbers, dates, or other data

Return the extracted text in a clear, organized format. Preserve the structure and organization as much as possible.

${description ? `Additional context: ${description}` : ''}`
              },
              {
                type: "image_url",
                image_url: {
                  url: imageBase64
                }
              }
            ]
          }
        ],
        temperature: 0.1, // Lower temperature for more accurate text extraction
        max_tokens: 1000
      })

      extractedText = extractionCompletion.choices[0]?.message?.content || ''
      
      console.log('‚úÖ Text extraction completed')
      console.log('üìä Vision API usage:', extractionCompletion.usage)
      console.log('üìÑ Extracted text length:', extractedText.length)
      console.log('üìù Extracted text content:')
      console.log('==========================================')
      console.log(extractedText)
      console.log('==========================================')
      
      if (!extractedText || extractedText.length < 10) {
        throw new Error('No meaningful text could be extracted from the image')
      }
      
    } catch (visionError) {
      console.error('‚ùå Vision API failed:', visionError)
      console.log('üîÑ Falling back to enhanced text-based generation...')
      
      // Fallback to enhanced description-based generation
      extractedText = `Based on uploaded image: ${description || 'Create a comprehensive form'}`
    }

    // STEP 2: Analyze the extracted text and create a form
    console.log('\nüß† STEP 2: Analyzing extracted text to create form...')
    console.log('üìù Text to analyze:', extractedText.substring(0, 200) + '...')
    
    const formPrompt = `Based on this extracted text from an image, create a comprehensive digital form:

EXTRACTED TEXT:
"""
${extractedText}
"""

INSTRUCTIONS:
- If the text shows a checklist, create "task" or "checkbox" fields for each item
- If it shows form fields or blanks, create appropriate input fields (text, email, number, date, etc.)
- If it shows options/choices, create "select" or "radio" fields
- If it shows yes/no questions, use "yesno" type
- If it shows rating or scoring, use "rating" fields
- If it shows tables with columns, create fields for each column
- Preserve the exact wording from the extracted text as field labels
- Create additional relevant fields to make it a complete, professional form

${description ? `Additional context: ${description}` : ''}

Return only valid JSON in this exact format:
{
  "title": "Form title based on extracted text",
  "description": "Brief description of what this form does",
  "fields": [
    {
      "id": "field_1",
      "type": "text|email|textarea|select|radio|checkbox|task|yesno|number|date|rating|slider|file|image",
      "label": "Exact text from image or descriptive label",
      "required": false,
      "options": ["Option 1", "Option 2"] // only for select/radio fields
    }
  ]
}

Available field types: text, email, textarea, select, radio, checkbox, number, date, rating, yesno, slider, file, image, task

For select/radio fields, add "options": ["Option 1", "Option 2", "Option 3"]
For rating fields, add "max": 5 and "rating_type": "stars"
For slider fields, add "slider_min": 0, "slider_max": 100
For task fields, use for checklist items or tasks to complete

IMPORTANT: 
- Create ALL fields mentioned in the extracted text
- Add 3-5 additional professional fields (contact info, dates, etc.) to make it complete
- Use "task" type for checklist items from the image
- Minimum 8 fields, maximum 20 fields
- Return ONLY the JSON, no other text`

    console.log('üîë Making OpenAI API call for form generation...')
    console.log('üìù Prompt being sent:')
    console.log('==========================================')
    console.log(formPrompt)
    console.log('==========================================')
    
    const formCompletion = await openai.chat.completions.create({
      model: "gpt-3.5-turbo",
      messages: [
        {
          role: "system",
          content: "You are a professional form designer. Analyze extracted text from images and create comprehensive digital forms. Return only valid JSON, no explanations."
        },
        {
          role: "user",
          content: formPrompt
        }
      ],
      temperature: 0.3,
      max_tokens: 1500
    })

    console.log('‚úÖ Form generation API call successful')
    console.log('üìä Usage:', formCompletion.usage)

    const responseText = formCompletion.choices[0]?.message?.content
    if (!responseText) {
      console.log('‚ùå No response content from OpenAI')
      throw new Error('No response from OpenAI')
    }

    console.log('üìÑ Raw form generation response:')
    console.log('==========================================')
    console.log(responseText)
    console.log('==========================================')
    console.log('üìÑ Response length:', responseText.length)

    // Clean the response - remove any markdown formatting
    let cleanedResponse = responseText.trim()
    console.log('üßπ Cleaning response...')
    
    if (cleanedResponse.startsWith('```json')) {
      cleanedResponse = cleanedResponse.replace(/```json\n?/, '').replace(/\n?```$/, '')
      console.log('  - Removed ```json wrapper')
    }
    if (cleanedResponse.startsWith('```')) {
      cleanedResponse = cleanedResponse.replace(/```\n?/, '').replace(/\n?```$/, '')
      console.log('  - Removed ``` wrapper')
    }

    console.log('üßπ Cleaned response:')
    console.log('==========================================')
    console.log(cleanedResponse)
    console.log('==========================================')

    // Parse the JSON response
    let aiResponse
    try {
      aiResponse = JSON.parse(cleanedResponse)
      console.log('‚úÖ JSON parsing successful')
      console.log('üìã Parsed AI response structure:', {
        title: aiResponse.title,
        description: aiResponse.description,
        fieldCount: aiResponse.fields?.length || 0,
        fieldTypes: aiResponse.fields?.map((f: any) => f.type) || []
      })
    } catch (parseError) {
      console.error('‚ùå JSON parsing failed:', parseError)
      console.error('Parse error details:', parseError instanceof Error ? parseError.message : 'Unknown error')
      console.error('Attempting to parse:', cleanedResponse.substring(0, 500) + '...')
      throw new Error(`Failed to parse AI response as JSON: ${parseError instanceof Error ? parseError.message : 'Unknown parsing error'}`)
    }
    
    // Validate and format the response
    const formResponse: AIFormResponse = {
      title: aiResponse.title || 'Form from Image',
      description: aiResponse.description || 'Generated from uploaded image',
      fields: aiResponse.fields?.map((field: any, index: number) => ({
        id: field.id || `field_${index + 1}`,
        type: field.type || 'text',
        label: field.label || `Field ${index + 1}`,
        placeholder: field.placeholder,
        required: field.required || false,
        options: field.options,
        min: field.min,
        max: field.max,
        rating_type: field.rating_type || 'stars',
        slider_min: field.slider_min,
        slider_max: field.slider_max,
        slider_step: field.slider_step || 1,
        accept: field.accept,
        multiple: field.multiple
      })) || []
    }

    console.log('\n‚úÖ Image form generation complete!')
    console.log('üìã Final form summary:')
    console.log('  - Title:', formResponse.title)
    console.log('  - Description:', formResponse.description)
    console.log('  - Field count:', formResponse.fields.length)
    console.log('  - Field details:')
    formResponse.fields.forEach((field, index) => {
      console.log(`    ${index + 1}. ${field.type}: "${field.label}"`)
    })

    return formResponse

  } catch (error) {
    console.error('üí• Error in generateFormFromImage:', error)
    if (error instanceof Error) {
      console.error('Error name:', error.name)
      console.error('Error message:', error.message)
      console.error('Error stack:', error.stack)
    }
    throw new Error(`Failed to generate form from image: ${error instanceof Error ? error.message : 'Unknown error'}`)
  }
}

// General AI form generation (handles both text and image)
export async function generateForm(request: AIFormRequest): Promise<AIFormResponse> {
  console.log('üéØ Generate form called with type:', request.type)
  
  if (request.type === 'image' && request.imageBase64) {
    return await generateFormFromImage(request.imageBase64, request.description)
  } else {
    return await generateFormFromText(request.description)
  }
}

// Form enhancement and suggestions
export async function enhanceForm(currentFields: FormField[], description: string): Promise<FormField[]> {
  try {
    const prompt = `Review and enhance this existing form based on the description: "${description}"

Current fields:
${JSON.stringify(currentFields, null, 2)}

Please suggest improvements, additional fields, or modifications to make the form more comprehensive and user-friendly. Return the enhanced fields array in the same JSON format.

Guidelines:
- Keep existing good fields
- Add missing important fields
- Improve field types where appropriate
- Add proper validation and options
- Ensure logical field ordering`

    const completion = await openai.chat.completions.create({
      model: "gpt-3.5-turbo",
      messages: [
        {
          role: "system",
          content: "You are a form optimization expert. Analyze existing forms and suggest improvements. Always respond with valid JSON array of fields only."
        },
        {
          role: "user",
          content: prompt
        }
      ],
      temperature: 0.3,
      max_tokens: 1500
    })

    const responseText = completion.choices[0]?.message?.content
    if (!responseText) {
      throw new Error('No response from OpenAI')
    }

    const enhancedFields = JSON.parse(responseText)
    return enhancedFields

  } catch (error) {
    console.error('Error enhancing form:', error)
    throw new Error('Failed to enhance form')
  }
} 